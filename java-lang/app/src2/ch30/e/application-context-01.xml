<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:aop="http://www.springframework.org/schema/aop"
    xmlns:p="http://www.springframework.org/schema/p"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd">
  
  <context:component-scan base-package="ch30.e"/>
  
  <bean id="myAdvice" class="ch30.e.MyAdvice"/>
  
  <aop:config>
    
    <aop:aspect id="aspect1" ref="myAdvice">
      
      <aop:pointcut id="pointcut1" expression="execution(* ch30.e.X.*(..))"/>
      
      <!-- 메서드 호출 전 : 파라미터 값을 미리 받기 
           args(원본 메서드의 파라미터 값과 advice의 파라미터 변수를 연결)
           => 원본 메서드: calculator(int i, int j, String op)
              advice 메서드: doBefore(String p1, int p2, int p3)
           => 원본 메서드의 파라미터 값과 advice 메서드의 파라미터를 연결
              i > p2,
              j > p3,
              op > p1,
              그래서 값이 들어갈 파라미터 이름을 순서대로 나열한다.
              args(p2, p3, p1) -->
      <aop:before pointcut="execution(* ch30.e.X.*(..)) and args(p2, p3, p1)" 
                  method="doBefore" />
      
      <!-- 메서드 실행 후 -->
      <aop:after pointcut-ref="pointcut1" method="doAfter" />
      
      <!-- 메서드 값 리턴 후 : 리턴한 값 받기 
           => 메서드의 리턴 값을 받을 advice의 파라미터 이름을 지정한다. 
           advice 메서드: doAfterReturning(Object rv)-->
      <aop:after-returning pointcut-ref="pointcut1"
          returning="rv" 
          method="doAfterReturning" />
      
      <!-- 메서드에서 예외를 던졌을 때 : 예외 객체 받기 
           => 예외 객체를 advice의 어떤 파라미터가 받을 지 이름을 지정한다.-->
      <aop:after-throwing pointcut-ref="pointcut1"
          throwing="err"
          method="doAfterThrowing" />
      
    </aop:aspect>
  
  </aop:config>
</beans>

















